library("neuralnet")
> 
> 
> #Type ?neuralnet for more information on the neuralnet library
> 
> #Generate 5 random numbers uniformly distributed between 0 and 30 (for very good results in such a range)
> #And store them as a dataframe
> traininginput <- as.data.frame(runif(10, min=0, max=6))
> trainingoutput <- (traininginput^3) - (2 * traininginput)
> 
> #Column bind the data into one variable
> trainingdata <- cbind(traininginput,trainingoutput)
> colnames(trainingdata) <- c("Input","Output")
> 
> #Train the neural network
> #Going to have C(5, 3) hidden layers
> #Threshold is a numeric value specifying the threshold for the partial
> #derivatives of the error function as stopping criteria.
> net.myfunction <- neuralnet(Output~Input, trainingdata, hidden=c(5, 3), threshold=0.01)
> print(net.myfunction)
$call
neuralnet(formula = Output ~ Input, data = trainingdata, hidden = c(5, 
    3), threshold = 0.01)

$response
           Output
1    2.3282282979
2    1.5479427485
3    9.8066814584
4   78.3925395328
5   26.1978877787
6   14.1242411335
7   -0.7957062672
8   94.2738072391
9    8.0115146162
10 156.0425041895

$covariate
             [,1]
 [1,] 1.812357740
 [2,] 1.705217953
 [3,] 2.450034762
 [4,] 4.435517879
 [5,] 3.194065106
 [6,] 2.691983954
 [7,] 1.141444383
 [8,] 4.697677473
 [9,] 2.331551149
[10,] 5.507510682

$model.list
$model.list$response
[1] "Output"

$model.list$variables
[1] "Input"


$err.fct
function (x, y) 
{
    1/2 * (y - x)^2
}
<bytecode: 0x0000000004ee7a78>
<environment: 0x0000000007d35770>
attr(,"type")
[1] "sse"

$act.fct
function (x) 
{
    1/(1 + exp(-x))
}
<bytecode: 0x00000000158215e0>
<environment: 0x0000000007d35770>
attr(,"type")
[1] "logistic"

$linear.output
[1] TRUE

$data
         Input         Output
1  1.812357740   2.3282282979
2  1.705217953   1.5479427485
3  2.450034762   9.8066814584
4  4.435517879  78.3925395328
5  3.194065106  26.1978877787
6  2.691983954  14.1242411335
7  1.141444383  -0.7957062672
8  4.697677473  94.2738072391
9  2.331551149   8.0115146162
10 5.507510682 156.0425041895

$net.result
$net.result[[1]]
             [,1]
1    2.3512399350
2    1.5928398081
3    9.7669574468
4   78.3923612026
5   26.1848860667
6   14.1963156935
7   -0.8213590378
8   94.2742324839
9    7.9501915017
10 156.0424699657


$weights
$weights[[1]]
$weights[[1]][[1]]
             [,1]         [,2]          [,3]          [,4]         [,5]
[1,]  3.986076161 -4.954986577  0.3987999206  1.1779725609 -2.049147629
[2,] -1.035500265  1.523430635 -0.2507699890 -0.6043927502  1.153916892

$weights[[1]][[2]]
               [,1]          [,2]           [,3]
[1,]  -0.2264642136  -1.444844677   1.1748308781
[2,] -12.7628725333 -31.888465803 -10.7207402195
[3,]   5.4507219394   7.169825559  -0.5595681129
[4,]  -3.0080110458  -9.241424757  -2.8729649075
[5,]  -6.0588965633 -25.701478925  11.2062158464
[6,]   2.4003134511   6.885427251   4.7792201383

$weights[[1]][[3]]
             [,1]
[1,] -8.342387659
[2,] 54.432713473
[3,] 55.430990469
[4,] 61.802406923



$startweights
$startweights[[1]]
$startweights[[1]][[1]]
              [,1]          [,2]         [,3]           [,4]           [,5]
[1,] -0.2811748827 -1.0361625790 -2.342538498 -0.06984926515 -1.22542958504
[2,] -1.7771908095  0.9416994416 -0.273854216  1.03731725632 -0.05017537438

$startweights[[1]][[2]]
              [,1]          [,2]          [,3]
[1,] -1.2050051421 -0.4003001483  1.6453181659
[2,] -1.3698127428  0.8468385561 -0.1005514867
[3,]  1.0135971871  1.5246305827  2.4062238525
[4,] -1.0264891593  0.1359985588  0.9706794581
[5,] -2.3431859036  1.2879258745 -0.2791795269
[6,] -0.4118849741 -0.6482249665  0.5063319663

$startweights[[1]][[3]]
               [,1]
[1,] -1.29107342503
[2,]  0.52844661476
[3,] -0.07304081901
[4,] -1.68863428467



$generalized.weights
$generalized.weights[[1]]
              [,1]
1  -2.399070773635
2  -6.938947116081
3  -0.190243075240
4  -0.012096706732
5  -0.040064197695
6  -0.108533026509
7  -1.583997305815
8  -0.005406727353
9  -0.260495812807
10 -0.001450646836


$result.matrix
                                       1
error                     0.006952934009
reached.threshold         0.009317690889
steps                 77200.000000000000
Intercept.to.1layhid1     3.986076160632
Input.to.1layhid1        -1.035500264761
Intercept.to.1layhid2    -4.954986576814
Input.to.1layhid2         1.523430635112
Intercept.to.1layhid3     0.398799920640
Input.to.1layhid3        -0.250769989010
Intercept.to.1layhid4     1.177972560906
Input.to.1layhid4        -0.604392750159
Intercept.to.1layhid5    -2.049147628955
Input.to.1layhid5         1.153916892402
Intercept.to.2layhid1    -0.226464213552
1layhid.1.to.2layhid1   -12.762872533282
1layhid.2.to.2layhid1     5.450721939428
1layhid.3.to.2layhid1    -3.008011045814
1layhid.4.to.2layhid1    -6.058896563253
1layhid.5.to.2layhid1     2.400313451115
Intercept.to.2layhid2    -1.444844676780
1layhid.1.to.2layhid2   -31.888465803119
1layhid.2.to.2layhid2     7.169825559263
1layhid.3.to.2layhid2    -9.241424757494
1layhid.4.to.2layhid2   -25.701478925075
1layhid.5.to.2layhid2     6.885427251103
Intercept.to.2layhid3     1.174830878104
1layhid.1.to.2layhid3   -10.720740219522
1layhid.2.to.2layhid3    -0.559568112883
1layhid.3.to.2layhid3    -2.872964907457
1layhid.4.to.2layhid3    11.206215846374
1layhid.5.to.2layhid3     4.779220138273
Intercept.to.Output      -8.342387658937
2layhid.1.to.Output      54.432713473215
2layhid.2.to.Output      55.430990468799
2layhid.3.to.Output      61.802406922762

attr(,"class")
[1] "nn"
> 
> #Plot the neural network
> plot(net.myfunction)
> 
> #Test the neural network on some training data
> testdata <- as.data.frame((2:10)*0.5) #Generate some numbers between 1 and 100
> net.results <- compute(net.myfunction, testdata) #Run them through the neural network
> 
> #Lets see what properties net.myfunction has
> ls(net.results)
[1] "net.result" "neurons"   
> 
> #Lets see the results
> print(net.results$net.result)
                [,1]
 [1,]  -1.1017965429
 [2,]   0.4362917695
 [3,]   3.9764290667
 [4,]  10.6014597807
 [5,]  21.1916914664
 [6,]  34.3455227903
 [7,]  49.8285341033
 [8,]  82.9598007786
 [9,] 110.4229410722
> 
> #Lets display a better version of the results
> cleanoutput <- cbind(testdata,(testdata^3) - (2 * testdata),
+                      as.data.frame(net.results$net.result))
> colnames(cleanoutput) <- c("Input","Expected Output","Neural Net Output")
> print(cleanoutput)
  Input Expected Output Neural Net Output
1   1.0          -1.000     -1.1017965429
2   1.5           0.375      0.4362917695
3   2.0           4.000      3.9764290667
4   2.5          10.625     10.6014597807
5   3.0          21.000     21.1916914664
6   3.5          35.875     34.3455227903
7   4.0          56.000     49.8285341033
8   4.5          82.125     82.9598007786
9   5.0         115.000    110.4229410722