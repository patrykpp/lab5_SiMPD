(sqrt(x) * x) - (2 * x)
}
#Generate 50 random numbers uniformly distributed between 0 and 100
#And store them as a dataframe
traininginput <-  as.data.frame(runif(100, min=0, max=100))
trainingoutput <- myfct(traininginput)
#Column bind the data into one variable
trainingdata <- cbind(traininginput,trainingoutput)
colnames(trainingdata) <- c("Input","Output")
#Train the neural network
#Going to have 10 hidden layers
#Threshold is a numeric value specifying the threshold for the partial
#derivatives of the error function as stopping criteria.
net <- neuralnet(Output~Input,trainingdata, hidden=c(10,6,4), threshold=0.01)
print(net)
#Plot the neural network
plot(net)
#Test the neural network on some training data
testdata <- as.data.frame(1:100) #Generate some squared numbers
net.results <- compute(net, testdata) #Run them through the neural network
#Lets see what properties net.sqrt has
ls(net.results)
#Lets see the results
print(net.results$net.result)
#Lets display a better version of the results
cleanoutput <- cbind(testdata,sqrt(testdata),
as.data.frame(net.results$net.result))
colnames(cleanoutput) <- c("Input","Expected Output","Neural Net Output")
print(cleanoutput)
print(net)
plot(net)
testdata <- as.data.frame(1:100) #Generate some squared numbers
net.results <- compute(net, testdata) #Run them through the neural network
ls(net.results)
print(net.results$net.result)
cleanoutput <- cbind(testdata,sqrt(testdata),
as.data.frame(net.results$net.result))
colnames(cleanoutput) <- c("Input","Expected Output","Neural Net Output")
print(cleanoutput)
library("neuralnet")
#Going to create a neural network to perform sqare rooting
#Type ?neuralnet for more information on the neuralnet library
myfct <- function(x) {
(sqrt(x) * x) - (2 * x)
}
#Generate 50 random numbers uniformly distributed between 0 and 100
#And store them as a dataframe
traininginput <-  as.data.frame(runif(100, min=0, max=100))
trainingoutput <- myfct(traininginput)
#Column bind the data into one variable
trainingdata <- cbind(traininginput,trainingoutput)
colnames(trainingdata) <- c("Input","Output")
#Train the neural network
#Going to have 10 hidden layers
#Threshold is a numeric value specifying the threshold for the partial
#derivatives of the error function as stopping criteria.
net <- neuralnet(Output~Input,trainingdata, hidden=c(10,6,4), threshold=0.01)
print(net)
#Plot the neural network
plot(net)
#Test the neural network on some training data
testdata <- as.data.frame(1:100) #Generate some squared numbers
results <- compute(net, testdata) #Run them through the neural network
#Lets see what properties net.sqrt has
ls(results)
#Lets see the results
print(results$result)
#Lets display a better version of the results
cleanoutput <- cbind(testdata,sqrt(testdata),
as.data.frame(results$result))
colnames(cleanoutput) <- c("Input","Expected Output","Neural Net Output")
print(cleanoutput)
print(net)
plot(net)
testdata <- as.data.frame(1:100) #Generate some squared numbers
results <- compute(net, testdata) #Run them through the neural network
ls(results)
print(results$result)
cleanoutput <- cbind(testdata,sqrt(testdata),
as.data.frame(results$result))
colnames(cleanoutput) <- c("Input","Expected Output","Neural Net Output")
print(cleanoutput)
traininginput <-  as.data.frame(runif(50, min=0, max=100))
trainingoutput <- myfct(traininginput)
trainingdata <- cbind(traininginput,trainingoutput)
colnames(trainingdata) <- c("Input","Output")
net <- neuralnet(Output~Input,trainingdata, hidden=c(10,6,4), threshold=0.01)
print(net)
plot(net)
net <- neuralnet(Output~Input,trainingdata, hidden=c(10,6,4), threshold=0.01,stepmax=1e6)
print(net)
plot(net)
net <- neuralnet(Output~Input,trainingdata, hidden=c(7,5,3), threshold=0.01,stepmax=1e6)
net.sqrt <- neuralnet(Output~Input,trainingdata, hidden=c(5,3), threshold=0.01,stepmax=1e6)
print(net.sqrt)
plot(net.sqrt)
net.sqrt <- neuralnet(Output~Input,trainingdata, hidden=c(5,3), threshold=0.01)
print(net.sqrt)
plot(net.sqrt)
plot(net.sqrt)
testdata <- as.data.frame(1:100) #Generate some squared numbers
plot(net.sqrt)
net.sqrt <- neuralnet(Output~Input,trainingdata, hidden=10, threshold=0.01)
plot(net.sqrt)
net.sqrt <- neuralnet(Output~Input,trainingdata, hidden=5, threshold=0.01)
plot(net.sqrt)
net.sqrt <- neuralnet(Output~Input,trainingdata, hidden=3, threshold=0.01)
plot(net.sqrt)
net.sqrt <- neuralnet(Output~Input,trainingdata, hidden=2, threshold=0.01)
plot(net.sqrt)
net.sqrt <- neuralnet(Output~Input,trainingdata, hidden=1, threshold=0.01)
net.sqrt <- neuralnet(Output~Input,trainingdata, hidden=2, threshold=0.01,stepmax = 1e6)
plot(net.sqrt)
library("neuralnet")
traininginput <- as.data.frame(runif(98, min=0, max=100))
trainingoutput <- x^3 - 2 * x
traininginput <- as.data.frame(runif(98, min=0, max=100))
trainingoutput <- traininginput^3 - 2 * traininginput
trainingdata <- cbind(traininginput,trainingoutput)
colnames(trainingdata) <- c("Input","Output")
net.log <- neuralnet(Output~Input, trainingdata, hidden=c(8, 5, 3), threshold=0.01)
print(net.log)
plot(net.log)
net.log <- neuralnet(Output~Input, trainingdata, hidden=c(6, 4, 2), threshold=0.01)
net.log <- neuralnet(Output~Input, trainingdata, hidden=c(3), threshold=0.01)
net.log <- neuralnet(Output~Input, trainingdata, hidden=c(3), threshold=0.01 , stepmax = 1e5)
net.log <- neuralnet(Output~Input, trainingdata, hidden=c(3,2,1), threshold=0.01 , stepmax = 1e5)
net.log <- neuralnet(Output~Input, trainingdata, hidden=c(3,2,1), threshold=0.01 , stepmax = 1e+05, rep = 1)
net.log <- neuralnet(Output~Input, trainingdata, hidden=c(6,12,8), threshold=0.01 , stepmax = 1e+05, rep = 1)
net.log <- neuralnet(Output~Input, trainingdata, hidden=c(3,2), threshold=0.01 , stepmax = 1e+05, rep = 1)
net.log <- neuralnet(Output~Input, trainingdata, hidden=c(3,2), threshold=0.01 , stepmax = 1e+06, rep = 1)
net.log <- neuralnet(Output~Input, trainingdata, hidden= 3, threshold=0.01 , stepmax = 1e+06, rep = 1)
net.log <- neuralnet(Output~Input, trainingdata, hidden= 2, threshold=0.01 , stepmax = 1e+06, rep = 1)
net.log <- neuralnet(Output~Input, trainingdata, hidden= 1, threshold=0.01 , stepmax = 1e+06, rep = 1)
net.log <- neuralnet(Output~Input, trainingdata, hidden= c(6,5,3), threshold=0.01 , stepmax = 1e+06, rep = 1)
net.log <- neuralnet(Output~Input, trainingdata, hidden= c(6,5,3), threshold=0.01 , stepmax = 1e+12, rep = 1)
net.log <- neuralnet(Output~Input, trainingdata, hidden= c(6,5,3), threshold=0.01 , stepmax = 1e+07, rep = 1)
net.log <- neuralnet(Output~Input, trainingdata, hidden= 0, threshold=0.01 , rep = 10)
net.log <- neuralnet(Output~Input, trainingdata, hidden= 0, threshold=0.01 , rep = 1)
library("neuralnet")
traininginput <- as.data.frame(runif(98, min=0, max=100))
trainingoutput <- (traininginput^3) - (2 * traininginput)
trainingdata <- cbind(traininginput,trainingoutput)
colnames(trainingdata) <- c("Input","Output")
net.log <- neuralnet(Output~Input, trainingdata, hidden= 0, threshold=0.01 , rep = 1)
library("neuralnet")
traininginput <- as.data.frame(runif(5, min=0, max=30))
trainingoutput <- (traininginput^3) - (2 * traininginput)
trainingdata <- cbind(traininginput,trainingoutput)
colnames(trainingdata) <- c("Input","Output")
net.myfunction <- neuralnet(Output~Input, trainingdata, hidden=c(5, 3), threshold=0.01)
print(net.myfunction)
plot(net.myfunction)
testdata <- as.data.frame((2:200)*0.5) #Generate some numbers between 1 and 100
net.results <- compute(net.myfunction, testdata) #Run them through the neural network
ls(net.results)
print(net.results$net.result)
cleanoutput <- cbind(testdata,(testdata^3) - (2 * testdata),
as.data.frame(net.results$net.result))
colnames(cleanoutput) <- c("Input","Expected Output","Neural Net Output")
print(cleanoutput)
library("neuralnet")
#Type ?neuralnet for more information on the neuralnet library
#Generate 5 random numbers uniformly distributed between 0 and 30 (for very good results in such a range)
#And store them as a dataframe
traininginput <- as.data.frame(runif(5, min=0, max=30))
trainingoutput <- (traininginput^3) - (2 * traininginput)
#Column bind the data into one variable
trainingdata <- cbind(traininginput,trainingoutput)
colnames(trainingdata) <- c("Input","Output")
#Train the neural network
#Going to have C(5, 3) hidden layers
#Threshold is a numeric value specifying the threshold for the partial
#derivatives of the error function as stopping criteria.
net.myfunction <- neuralnet(Output~Input, trainingdata, hidden=c(5, 3), threshold=0.01)
print(net.myfunction)
#Plot the neural network
plot(net.myfunction)
#Test the neural network on some training data
testdata <- as.data.frame((2:200)*0.5) #Generate some numbers between 1 and 100
net.results <- compute(net.myfunction, testdata) #Run them through the neural network
#Lets see what properties net.myfunction has
ls(net.results)
#Lets see the results
print(net.results$net.result)
#Lets display a better version of the results
cleanoutput <- cbind(testdata,(testdata^3) - (2 * testdata),
as.data.frame(net.results$net.result))
colnames(cleanoutput) <- c("Input","Expected Output","Neural Net Output")
print(cleanoutput)
library("neuralnet")
#Type ?neuralnet for more information on the neuralnet library
#Generate 5 random numbers uniformly distributed between 0 and 30 (for very good results in such a range)
#And store them as a dataframe
traininginput <- as.data.frame(runif(5, min=0, max=30))
trainingoutput <- (traininginput^3) - (2 * traininginput)
#Column bind the data into one variable
trainingdata <- cbind(traininginput,trainingoutput)
colnames(trainingdata) <- c("Input","Output")
#Train the neural network
#Going to have C(5, 3) hidden layers
#Threshold is a numeric value specifying the threshold for the partial
#derivatives of the error function as stopping criteria.
net.myfunction <- neuralnet(Output~Input, trainingdata, hidden=c(5, 3), threshold=0.01)
print(net.myfunction)
#Plot the neural network
plot(net.myfunction)
#Test the neural network on some training data
testdata <- as.data.frame((2:200)*0.5) #Generate some numbers between 1 and 100
net.results <- compute(net.myfunction, testdata) #Run them through the neural network
#Lets see what properties net.myfunction has
ls(net.results)
#Lets see the results
print(net.results$net.result)
#Lets display a better version of the results
cleanoutput <- cbind(testdata,(testdata^3) - (2 * testdata),
as.data.frame(net.results$net.result))
colnames(cleanoutput) <- c("Input","Expected Output","Neural Net Output")
print(cleanoutput)
#Generate 5 random numbers uniformly distributed between 0 and 30 (for very good results in such a range)
#And store them as a dataframe
traininginput <- as.data.frame(runif(5, min=0, max=30))
library("neuralnet")
#Type ?neuralnet for more information on the neuralnet library //
#Generate 5 random numbers uniformly distributed between 0 and 30 (for very good results in such a range)
#And store them as a dataframe
traininginput <- as.data.frame(runif(5, min=0, max=30))
trainingoutput <- (traininginput^3) - (2 * traininginput)
#Column bind the data into one variable
trainingdata <- cbind(traininginput,trainingoutput)
colnames(trainingdata) <- c("Input","Output")
#Train the neural network
#Going to have C(5, 3) hidden layers
#Threshold is a numeric value specifying the threshold for the partial
#derivatives of the error function as stopping criteria.
net.myfunction <- neuralnet(Output~Input, trainingdata, hidden=c(5, 3), threshold=0.01)
print(net.myfunction)
#Plot the neural network
plot(net.myfunction)
#Test the neural network on some training data
testdata <- as.data.frame((2:200)*0.5) #Generate some numbers between 1 and 100
net.results <- compute(net.myfunction, testdata) #Run them through the neural network
#Lets see what properties net.myfunction has
ls(net.results)
#Lets see the results
print(net.results$net.result)
#Lets display a better version of the results
cleanoutput <- cbind(testdata,(testdata^3) - (2 * testdata),
as.data.frame(net.results$net.result))
colnames(cleanoutput) <- c("Input","Expected Output","Neural Net Output")
print(cleanoutput)
library("neuralnet")
#Type ?neuralnet for more information on the neuralnet library
#Generate 5 random numbers uniformly distributed between 0 and 30 (for very good results in such a range)
#And store them as a dataframe
traininginput <- as.data.frame(runif(5, min=0, max=30))
trainingoutput <- (traininginput^3) - (2 * traininginput)
#Column bind the data into one variable
trainingdata <- cbind(traininginput,trainingoutput)
colnames(trainingdata) <- c("Input","Output")
#Train the neural network
#Going to have C(5, 3) hidden layers
#Threshold is a numeric value specifying the threshold for the partial
#derivatives of the error function as stopping criteria.
net.myfunction <- neuralnet(Output~Input, trainingdata, hidden=c(5, 3), threshold=0.01)
print(net.myfunction)
#Plot the neural network
plot(net.myfunction)
#Test the neural network on some training data
testdata <- as.data.frame((2:250)*0.5) #Generate some numbers between 1 and 100
net.results <- compute(net.myfunction, testdata) #Run them through the neural network
#Lets see what properties net.myfunction has
ls(net.results)
#Lets see the results
print(net.results$net.result)
#Lets display a better version of the results
cleanoutput <- cbind(testdata,(testdata^3) - (2 * testdata),
as.data.frame(net.results$net.result))
colnames(cleanoutput) <- c("Input","Expected Output","Neural Net Output")
print(cleanoutput)
library("neuralnet")
#Type ?neuralnet for more information on the neuralnet library
#Generate 5 random numbers uniformly distributed between 0 and 30 (for very good results in such a range)
#And store them as a dataframe
traininginput <- as.data.frame(runif(5, min=0, max=30))
trainingoutput <- (traininginput^3) - (2 * traininginput)
#Column bind the data into one variable
trainingdata <- cbind(traininginput,trainingoutput)
colnames(trainingdata) <- c("Input","Output")
#Train the neural network
#Going to have C(5, 3) hidden layers
#Threshold is a numeric value specifying the threshold for the partial
#derivatives of the error function as stopping criteria.
net.myfunction <- neuralnet(Output~Input, trainingdata, hidden=c(5, 3), threshold=0.01)
print(net.myfunction)
#Plot the neural network
plot(net.myfunction)
#Test the neural network on some training data
testdata <- as.data.frame((2:250)*0.5) #Generate some numbers between 1 and 100
net.results <- compute(net.myfunction, testdata) #Run them through the neural network
#Lets see what properties net.myfunction has
ls(net.results)
#Lets see the results
print(net.results$net.result)
#Lets display a better version of the results
cleanoutput <- cbind(testdata,(testdata^3) - (2 * testdata),
as.data.frame(net.results$net.result))
colnames(cleanoutput) <- c("Input","Expected Output","Neural Net Output")
print(cleanoutput)
library("neuralnet")
#Type ?neuralnet for more information on the neuralnet library
#Generate 5 random numbers uniformly distributed between 0 and 30 (for very good results in such a range)
#And store them as a dataframe
traininginput <- as.data.frame(runif(5, min=0, max=30))
trainingoutput <- (traininginput^3) - (2 * traininginput)
#Column bind the data into one variable
trainingdata <- cbind(traininginput,trainingoutput)
colnames(trainingdata) <- c("Input","Output")
#Train the neural network
#Going to have C(5, 3) hidden layers
#Threshold is a numeric value specifying the threshold for the partial
#derivatives of the error function as stopping criteria.
net.myfunction <- neuralnet(Output~Input, trainingdata, hidden=c(5, 3), threshold=0.01)
print(net.myfunction)
#Plot the neural network
plot(net.myfunction)
#Test the neural network on some training data
testdata <- as.data.frame((2:200)*0.5) #Generate some numbers between 1 and 100
net.results <- compute(net.myfunction, testdata) #Run them through the neural network
#Lets see what properties net.myfunction has
ls(net.results)
#Lets see the results
print(net.results$net.result)
#Lets display a better version of the results
cleanoutput <- cbind(testdata,(testdata^3) - (2 * testdata),
as.data.frame(net.results$net.result))
colnames(cleanoutput) <- c("Input","Expected Output","Neural Net Output")
print(cleanoutput)
library("neuralnet")
#Type ?neuralnet for more information on the neuralnet library
#Generate 5 random numbers uniformly distributed between 0 and 30 (for very good results in such a range)
#And store them as a dataframe
traininginput <- as.data.frame(runif(5, min=0, max=30))
trainingoutput <- (traininginput^3) - (2 * traininginput)
#Column bind the data into one variable
trainingdata <- cbind(traininginput,trainingoutput)
colnames(trainingdata) <- c("Input","Output")
#Train the neural network
#Going to have C(5, 3) hidden layers
#Threshold is a numeric value specifying the threshold for the partial
#derivatives of the error function as stopping criteria.
net.myfunction <- neuralnet(Output~Input, trainingdata, hidden=c(5, 3), threshold=0.01)
print(net.myfunction)
#Plot the neural network
plot(net.myfunction)
#Test the neural network on some training data
testdata <- as.data.frame((2:200)*0.5) #Generate some numbers between 1 and 100
net.results <- compute(net.myfunction, testdata) #Run them through the neural network
#Lets see what properties net.myfunction has
ls(net.results)
#Lets see the results
print(net.results$net.result)
#Lets display a better version of the results
cleanoutput <- cbind(testdata,(testdata^3) - (2 * testdata),
as.data.frame(net.results$net.result))
colnames(cleanoutput) <- c("Input","Expected Output","Neural Net Output")
print(cleanoutput)
library("neuralnet")
#Type ?neuralnet for more information on the neuralnet library
#Generate 5 random numbers uniformly distributed between 0 and 30 (for very good results in such a range)
#And store them as a dataframe
traininginput <- as.data.frame(runif(5, min=0, max=30))
trainingoutput <- (traininginput^3) - (2 * traininginput)
#Column bind the data into one variable
trainingdata <- cbind(traininginput,trainingoutput)
colnames(trainingdata) <- c("Input","Output")
#Train the neural network
#Going to have C(5, 3) hidden layers
#Threshold is a numeric value specifying the threshold for the partial
#derivatives of the error function as stopping criteria.
net.myfunction <- neuralnet(Output~Input, trainingdata, hidden=c(5, 3), threshold=0.01)
print(net.myfunction)
#Plot the neural network
plot(net.myfunction)
#Test the neural network on some training data
testdata <- as.data.frame((2:200)*0.5) #Generate some numbers between 1 and 100
net.results <- compute(net.myfunction, testdata) #Run them through the neural network
#Lets see what properties net.myfunction has
ls(net.results)
#Lets see the results
print(net.results$net.result)
#Lets display a better version of the results
cleanoutput <- cbind(testdata,(testdata^3) - (2 * testdata),
as.data.frame(net.results$net.result))
colnames(cleanoutput) <- c("Input","Expected Output","Neural Net Output")
print(cleanoutput)
library("neuralnet")
#Type ?neuralnet for more information on the neuralnet library
#Generate 5 random numbers uniformly distributed between 0 and 30 (for very good results in such a range)
#And store them as a dataframe
traininginput <- as.data.frame(runif(5, min=0, max=30))
trainingoutput <- (traininginput^3) - (2 * traininginput)
#Column bind the data into one variable
trainingdata <- cbind(traininginput,trainingoutput)
colnames(trainingdata) <- c("Input","Output")
#Train the neural network
#Going to have C(5, 3) hidden layers
#Threshold is a numeric value specifying the threshold for the partial
#derivatives of the error function as stopping criteria.
net.myfunction <- neuralnet(Output~Input, trainingdata, hidden=c(5, 3), threshold=0.01)
print(net.myfunction)
#Plot the neural network
plot(net.myfunction)
#Test the neural network on some training data
testdata <- as.data.frame((2:100)*0.5) #Generate some numbers between 1 and 100
net.results <- compute(net.myfunction, testdata) #Run them through the neural network
#Lets see what properties net.myfunction has
ls(net.results)
#Lets see the results
print(net.results$net.result)
#Lets display a better version of the results
cleanoutput <- cbind(testdata,(testdata^3) - (2 * testdata),
as.data.frame(net.results$net.result))
colnames(cleanoutput) <- c("Input","Expected Output","Neural Net Output")
print(cleanoutput)
library("neuralnet")
#Type ?neuralnet for more information on the neuralnet library
#Generate 5 random numbers uniformly distributed between 0 and 30 (for very good results in such a range)
#And store them as a dataframe
traininginput <- as.data.frame(runif(5, min=0, max=30))
trainingoutput <- (traininginput^3) - (2 * traininginput)
#Column bind the data into one variable
trainingdata <- cbind(traininginput,trainingoutput)
colnames(trainingdata) <- c("Input","Output")
#Train the neural network
#Going to have C(5, 3) hidden layers
#Threshold is a numeric value specifying the threshold for the partial
#derivatives of the error function as stopping criteria.
net.myfunction <- neuralnet(Output~Input, trainingdata, hidden=c(5, 3), threshold=0.01)
print(net.myfunction)
#Plot the neural network
plot(net.myfunction)
#Test the neural network on some training data
testdata <- as.data.frame((2:250)*0.5) #Generate some numbers between 1 and 100
net.results <- compute(net.myfunction, testdata) #Run them through the neural network
#Lets see what properties net.myfunction has
ls(net.results)
#Lets see the results
print(net.results$net.result)
#Lets display a better version of the results
cleanoutput <- cbind(testdata,(testdata^3) - (2 * testdata),
as.data.frame(net.results$net.result))
colnames(cleanoutput) <- c("Input","Expected Output","Neural Net Output")
print(cleanoutput)
library("neuralnet")
#Type ?neuralnet for more information on the neuralnet library
#Generate 5 random numbers uniformly distributed between 0 and 30 (for very good results in such a range)
#And store them as a dataframe
traininginput <- as.data.frame(runif(5, min=0, max=100))
trainingoutput <- (traininginput^3) - (2 * traininginput)
#Column bind the data into one variable
trainingdata <- cbind(traininginput,trainingoutput)
colnames(trainingdata) <- c("Input","Output")
#Train the neural network
#Going to have C(5, 3) hidden layers
#Threshold is a numeric value specifying the threshold for the partial
#derivatives of the error function as stopping criteria.
net.myfunction <- neuralnet(Output~Input, trainingdata, hidden=c(5, 3), threshold=0.01)
print(net.myfunction)
#Plot the neural network
plot(net.myfunction)
#Test the neural network on some training data
testdata <- as.data.frame((2:250)*0.5) #Generate some numbers between 1 and 100
net.results <- compute(net.myfunction, testdata) #Run them through the neural network
#Lets see what properties net.myfunction has
ls(net.results)
#Lets see the results
print(net.results$net.result)
#Lets display a better version of the results
cleanoutput <- cbind(testdata,(testdata^3) - (2 * testdata),
as.data.frame(net.results$net.result))
colnames(cleanoutput) <- c("Input","Expected Output","Neural Net Output")
print(cleanoutput)
library("neuralnet")
#Type ?neuralnet for more information on the neuralnet library
#Generate 5 random numbers uniformly distributed between 0 and 30 (for very good results in such a range)
#And store them as a dataframe
traininginput <- as.data.frame(runif(5, min=0, max=30))
trainingoutput <- (traininginput^3) - (2 * traininginput)
#Column bind the data into one variable
trainingdata <- cbind(traininginput,trainingoutput)
colnames(trainingdata) <- c("Input","Output")
#Train the neural network
#Going to have C(5, 3) hidden layers
#Threshold is a numeric value specifying the threshold for the partial
#derivatives of the error function as stopping criteria.
net.myfunction <- neuralnet(Output~Input, trainingdata, hidden=c(5, 3), threshold=0.01)
print(net.myfunction)
#Plot the neural network
plot(net.myfunction)
#Test the neural network on some training data
testdata <- as.data.frame((2:200)*0.5) #Generate some numbers between 1 and 100
net.results <- compute(net.myfunction, testdata) #Run them through the neural network
#Lets see what properties net.myfunction has
ls(net.results)
#Lets see the results
print(net.results$net.result)
#Lets display a better version of the results
cleanoutput <- cbind(testdata,(testdata^3) - (2 * testdata),
as.data.frame(net.results$net.result))
colnames(cleanoutput) <- c("Input","Expected Output","Neural Net Output")
print(cleanoutput)
